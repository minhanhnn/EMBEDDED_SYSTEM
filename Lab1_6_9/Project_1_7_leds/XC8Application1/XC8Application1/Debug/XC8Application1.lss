
XC8Application1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000144  2**0
                  ALLOC, LOAD, DATA
  1 .text         00000094  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  00000144  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  00000173  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000181  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000962  00000000  00000000  000001a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006b9  00000000  00000000  00000b03  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001f2  00000000  00000000  000011bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  000013b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000255  00000000  00000000  000013d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000010  00000000  00000000  00001629  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .text         00000004  000000c2  000000c2  00000136  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000163c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .text.main    00000018  00000094  00000094  00000108  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .text.__dummy_fini 00000002  000000ca  000000ca  0000013e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.__dummy_funcs_on_exit 00000002  000000cc  000000cc  00000140  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.__dummy_simulator_exit 00000002  000000ce  000000ce  00000142  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.exit    00000016  000000ac  000000ac  00000120  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text._Exit   00000004  000000c6  000000c6  0000013a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
   8:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
   c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  10:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  14:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  18:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  1c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  20:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  24:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  28:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  2c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  30:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  34:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  38:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  3c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  40:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  44:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  48:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  4c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  50:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  54:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  58:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  5c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  60:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  64:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  68:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  6c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  70:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  74:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  78:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d8 e0       	ldi	r29, 0x08	; 8
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61
  88:	0e 94 4a 00 	call	0x94	; 0x94 <_etext>
  8c:	0c 94 56 00 	jmp	0xac	; 0xac <exit>

00000090 <_exit>:
  90:	f8 94       	cli

00000092 <__stop_program>:
  92:	ff cf       	rjmp	.-2      	; 0x92 <__stop_program>

Disassembly of section .text:

000000c2 <__bad_interrupt>:
  c2:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.main:

00000094 <main>:
#include <avr/io.h>
#include <xc.h>

int main(void)
{
	DDRA = 0xff;
  94:	8f ef       	ldi	r24, 0xFF	; 255
  96:	81 b9       	out	0x01, r24	; 1
	DDRC = ~(0x01);
  98:	8e ef       	ldi	r24, 0xFE	; 254
  9a:	87 b9       	out	0x07, r24	; 7
	while(1)
	{
		if((PINC&1) == 0x00){//when button is pressed, PINC0 = 0
  9c:	30 99       	sbic	0x06, 0	; 6
  9e:	03 c0       	rjmp	.+6      	; 0xa6 <main+0x12>
			PORTA = 0x0F; //turn on first 4 LEDs 
  a0:	8f e0       	ldi	r24, 0x0F	; 15
  a2:	82 b9       	out	0x02, r24	; 2
  a4:	fb cf       	rjmp	.-10     	; 0x9c <main+0x8>
		}
		else{
			PORTA = 0xF0; //turn on last 4 LEDs
  a6:	80 ef       	ldi	r24, 0xF0	; 240
  a8:	82 b9       	out	0x02, r24	; 2
  aa:	f8 cf       	rjmp	.-16     	; 0x9c <main+0x8>

Disassembly of section .text.__dummy_fini:

000000ca <_fini>:
  ca:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

000000cc <__funcs_on_exit>:
  cc:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

000000ce <__simulator_exit>:
  ce:	08 95       	ret

Disassembly of section .text.exit:

000000ac <exit>:
  ac:	ec 01       	movw	r28, r24
  ae:	0e 94 66 00 	call	0xcc	; 0xcc <__funcs_on_exit>
  b2:	0e 94 65 00 	call	0xca	; 0xca <_fini>
  b6:	ce 01       	movw	r24, r28
  b8:	0e 94 67 00 	call	0xce	; 0xce <__simulator_exit>
  bc:	ce 01       	movw	r24, r28
  be:	0e 94 63 00 	call	0xc6	; 0xc6 <_Exit>

Disassembly of section .text._Exit:

000000c6 <_Exit>:
  c6:	0e 94 48 00 	call	0x90	; 0x90 <_exit>
