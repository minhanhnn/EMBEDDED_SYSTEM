
XC8Application1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000269  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000f0  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  00000269  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000001c  00000000  00000000  00000298  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000002b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000009df  00000000  00000000  000002dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000707  00000000  00000000  00000cbb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002a6  00000000  00000000  000013c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00001668  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000255  00000000  00000000  0000169c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000152  00000000  00000000  000018f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001a43  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  000001a6  000001a6  0000025a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001a5c  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.print_number 00000052  000000f0  000000f0  000001a4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.main    00000042  00000142  00000142  000001f6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .bss.number   00000001  00800100  00800100  00000269  2**0
                  ALLOC
 17 .data.wait_flag 00000001  00800101  000001b4  00000268  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 18 .text.libgcc  0000000c  0000019a  0000019a  0000024e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.__dummy_fini 00000002  000001ae  000001ae  00000262  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.__dummy_funcs_on_exit 00000002  000001b0  000001b0  00000264  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.__dummy_simulator_exit 00000002  000001b2  000001b2  00000266  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.exit    00000016  00000184  00000184  00000238  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text._Exit   00000004  000001aa  000001aa  0000025e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__ctors_end>
   4:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
   8:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
   c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  10:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  14:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  18:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  1c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  20:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  24:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  28:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  2c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  30:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  34:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  38:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  3c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  40:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  44:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  48:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  4c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  50:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  54:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  58:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  5c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  60:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  64:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  68:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  6c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  70:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  74:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  78:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  7c:	80 00       	.word	0x0080	; ????
  7e:	83 00       	.word	0x0083	; ????
  80:	86 00       	.word	0x0086	; ????
  82:	89 00       	.word	0x0089	; ????
  84:	8c 00       	.word	0x008c	; ????
  86:	8f 00       	.word	0x008f	; ????
  88:	92 00       	.word	0x0092	; ????
  8a:	95 00       	.word	0x0095	; ????
  8c:	98 00       	.word	0x0098	; ????
  8e:	9b 00       	.word	0x009b	; ????

00000090 <.dinit>:
  90:	01 00       	.word	0x0001	; ????
  92:	01 01       	movw	r0, r2
  94:	80 01       	movw	r16, r0
  96:	01 01       	movw	r0, r2
  98:	02 00       	.word	0x0002	; ????
  9a:	01 b4       	in	r0, 0x21	; 33

0000009c <__ctors_end>:
  9c:	11 24       	eor	r1, r1
  9e:	1f be       	out	0x3f, r1	; 63
  a0:	cf ef       	ldi	r28, 0xFF	; 255
  a2:	d8 e0       	ldi	r29, 0x08	; 8
  a4:	de bf       	out	0x3e, r29	; 62
  a6:	cd bf       	out	0x3d, r28	; 61

000000a8 <__do_copy_data>:
  a8:	e0 e9       	ldi	r30, 0x90	; 144
  aa:	f0 e0       	ldi	r31, 0x00	; 0
  ac:	40 e0       	ldi	r20, 0x00	; 0
  ae:	17 c0       	rjmp	.+46     	; 0xde <__do_clear_bss+0x8>
  b0:	b5 91       	lpm	r27, Z+
  b2:	a5 91       	lpm	r26, Z+
  b4:	35 91       	lpm	r19, Z+
  b6:	25 91       	lpm	r18, Z+
  b8:	05 91       	lpm	r16, Z+
  ba:	07 fd       	sbrc	r16, 7
  bc:	0c c0       	rjmp	.+24     	; 0xd6 <__do_clear_bss>
  be:	95 91       	lpm	r25, Z+
  c0:	85 91       	lpm	r24, Z+
  c2:	ef 01       	movw	r28, r30
  c4:	f9 2f       	mov	r31, r25
  c6:	e8 2f       	mov	r30, r24
  c8:	05 90       	lpm	r0, Z+
  ca:	0d 92       	st	X+, r0
  cc:	a2 17       	cp	r26, r18
  ce:	b3 07       	cpc	r27, r19
  d0:	d9 f7       	brne	.-10     	; 0xc8 <__do_copy_data+0x20>
  d2:	fe 01       	movw	r30, r28
  d4:	04 c0       	rjmp	.+8      	; 0xde <__do_clear_bss+0x8>

000000d6 <__do_clear_bss>:
  d6:	1d 92       	st	X+, r1
  d8:	a2 17       	cp	r26, r18
  da:	b3 07       	cpc	r27, r19
  dc:	e1 f7       	brne	.-8      	; 0xd6 <__do_clear_bss>
  de:	ec 39       	cpi	r30, 0x9C	; 156
  e0:	f4 07       	cpc	r31, r20
  e2:	31 f7       	brne	.-52     	; 0xb0 <__do_copy_data+0x8>
  e4:	0e 94 a1 00 	call	0x142	; 0x142 <main>
  e8:	0c 94 c2 00 	jmp	0x184	; 0x184 <exit>

000000ec <_exit>:
  ec:	f8 94       	cli

000000ee <__stop_program>:
  ee:	ff cf       	rjmp	.-2      	; 0xee <__stop_program>

Disassembly of section .text:

000001a6 <__bad_interrupt>:
 1a6:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.print_number:

000000f0 <print_number>:

volatile char wait_flag = 1;
volatile char number = 0;

void print_number(int num){
	switch(num){
  f0:	8a 30       	cpi	r24, 0x0A	; 10
  f2:	91 05       	cpc	r25, r1
  f4:	18 f5       	brcc	.+70     	; 0x13c <print_number+0x4c>
  f6:	fc 01       	movw	r30, r24
  f8:	e2 5c       	subi	r30, 0xC2	; 194
  fa:	ff 4f       	sbci	r31, 0xFF	; 255
  fc:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__tablejump2__>
		case 0:
		PORTA = Num0;
 100:	8f e3       	ldi	r24, 0x3F	; 63
 102:	82 b9       	out	0x02, r24	; 2
		break;
 104:	08 95       	ret
		case 1:
		PORTA = Num1;
 106:	86 e0       	ldi	r24, 0x06	; 6
 108:	82 b9       	out	0x02, r24	; 2
		break;
 10a:	08 95       	ret
		case 2:
		PORTA = Num2;
 10c:	8b e5       	ldi	r24, 0x5B	; 91
 10e:	82 b9       	out	0x02, r24	; 2
		break;
 110:	08 95       	ret
		case 3:
		PORTA = Num3;
 112:	8f e4       	ldi	r24, 0x4F	; 79
 114:	82 b9       	out	0x02, r24	; 2
		break;
 116:	08 95       	ret
		case 4:
		PORTA = Num4;
 118:	86 e6       	ldi	r24, 0x66	; 102
 11a:	82 b9       	out	0x02, r24	; 2
		break;
 11c:	08 95       	ret
		case 5:
		PORTA = Num5;
 11e:	8d e6       	ldi	r24, 0x6D	; 109
 120:	82 b9       	out	0x02, r24	; 2
		break;
 122:	08 95       	ret
		case 6:
		PORTA = Num6;
 124:	8d e7       	ldi	r24, 0x7D	; 125
 126:	82 b9       	out	0x02, r24	; 2
		break;
 128:	08 95       	ret
		case 7:
		PORTA = Num7;
 12a:	87 e0       	ldi	r24, 0x07	; 7
 12c:	82 b9       	out	0x02, r24	; 2
		break;
 12e:	08 95       	ret
		case 8:
		PORTA = Num8;
 130:	8f e7       	ldi	r24, 0x7F	; 127
 132:	82 b9       	out	0x02, r24	; 2
		break;
 134:	08 95       	ret
		case 9:
		PORTA = Num9;
 136:	8f e6       	ldi	r24, 0x6F	; 111
 138:	82 b9       	out	0x02, r24	; 2
		break;
 13a:	08 95       	ret
		default:
		PORTA = Num0;
 13c:	8f e3       	ldi	r24, 0x3F	; 63
 13e:	82 b9       	out	0x02, r24	; 2
 140:	08 95       	ret

Disassembly of section .text.main:

00000142 <main>:
	}
}

int main(void)
{
	DDRA = 0xff;  //Takes PORTA as output
 142:	8f ef       	ldi	r24, 0xFF	; 255
 144:	81 b9       	out	0x01, r24	; 1
	DDRC = ~(0x01); //Takes PORTC as output 
 146:	8e ef       	ldi	r24, 0xFE	; 254
 148:	87 b9       	out	0x07, r24	; 7
    while(1)
    {   
		if((PINC&1) == 0x00){  //when button is pressed, PINC0 = 0 
 14a:	30 99       	sbic	0x06, 0	; 6
 14c:	17 c0       	rjmp	.+46     	; 0x17c <main+0x3a>
			if(wait_flag == 1){ //check the wait_flag to prevent continuous number incrementation when the button is pressed and held
 14e:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <wait_flag>
 152:	81 30       	cpi	r24, 0x01	; 1
 154:	d1 f7       	brne	.-12     	; 0x14a <main+0x8>
				wait_flag = 0;
 156:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <wait_flag>
				number++;
 15a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 15e:	8f 5f       	subi	r24, 0xFF	; 255
 160:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
				if(number > 9){
 164:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 168:	8a 30       	cpi	r24, 0x0A	; 10
 16a:	10 f0       	brcs	.+4      	; 0x170 <main+0x2e>
					number = 0;
 16c:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
				}
				print_number(number); //display number on 7 segment LED
 170:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	0e 94 78 00 	call	0xf0	; 0xf0 <__data_load_end>
 17a:	e7 cf       	rjmp	.-50     	; 0x14a <main+0x8>
			}
		}
		else{
			wait_flag = 1;
 17c:	81 e0       	ldi	r24, 0x01	; 1
 17e:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <wait_flag>
 182:	e3 cf       	rjmp	.-58     	; 0x14a <main+0x8>

Disassembly of section .text.libgcc:

0000019a <__tablejump2__>:
 19a:	ee 0f       	add	r30, r30
 19c:	ff 1f       	adc	r31, r31
 19e:	05 90       	lpm	r0, Z+
 1a0:	f4 91       	lpm	r31, Z
 1a2:	e0 2d       	mov	r30, r0
 1a4:	09 94       	ijmp

Disassembly of section .text.__dummy_fini:

000001ae <_fini>:
 1ae:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

000001b0 <__funcs_on_exit>:
 1b0:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

000001b2 <__simulator_exit>:
 1b2:	08 95       	ret

Disassembly of section .text.exit:

00000184 <exit>:
 184:	ec 01       	movw	r28, r24
 186:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <__funcs_on_exit>
 18a:	0e 94 d7 00 	call	0x1ae	; 0x1ae <_fini>
 18e:	ce 01       	movw	r24, r28
 190:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <__simulator_exit>
 194:	ce 01       	movw	r24, r28
 196:	0e 94 d5 00 	call	0x1aa	; 0x1aa <_Exit>

Disassembly of section .text._Exit:

000001aa <_Exit>:
 1aa:	0e 94 76 00 	call	0xec	; 0xec <_exit>
